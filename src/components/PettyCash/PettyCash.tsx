import React, { useState } from 'react';
import { Plus, Filter, PiggyBank, TrendingUp, TrendingDown } from 'lucide-react';
import { PettyCashTable } from './PettyCashTable';
import { PettyCashModal } from './PettyCashModal';
import { PettyCashTransaction, Building } from '../../types';

interface PettyCashProps {
  transactions: PettyCashTransaction[];
  building: Building;
  onAddTransaction: (transaction: Omit<PettyCashTransaction, 'id'>) => void;
  onUpdateTransaction: (transaction: PettyCashTransaction) => void;
  onDeleteTransaction: (transactionId: string) => void;
}

export const PettyCash: React.FC<PettyCashProps> = ({
  transactions,
  building,
  onAddTransaction,
  onUpdateTransaction,
  onDeleteTransaction
}) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingTransaction, setEditingTransaction] = useState<PettyCashTransaction | null>(null);
  const [filterType, setFilterType] = useState<'all' | 'income' | 'expense'>('all');
  const [filterEntrance, setFilterEntrance] = useState<string>('all');

  const filteredTransactions = transactions.filter(t => {
    const typeMatch = filterType === 'all' || t.type === filterType;
    const entranceMatch = filterEntrance === 'all' || 
      (filterEntrance === 'building' && !t.entrance) ||
      t.entrance === filterEntrance;
    return typeMatch && entranceMatch;
  });

  const balance = transactions.reduce((sum, t) => 
    sum + (t.type === 'income' ? t.amount : -t.amount), 0
  );

  const totalIncome = transactions
    .filter(t => t.type === 'income')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalExpenses = transactions
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + t.amount, 0);

  const handleAddTransaction = (transactionData: Omit<PettyCashTransaction, 'id'>) => {
    onAddTransaction(transactionData);
    setIsModalOpen(false);
  };

  const handleEditTransaction = (transaction: PettyCashTransaction) => {
    if (transaction.isAutoGenerated) return; // Cannot edit auto-generated transactions
    setEditingTransaction(transaction);
    setIsModalOpen(true);
  };

  const handleUpdateTransaction = (transactionData: Omit<PettyCashTransaction, 'id'>) => {
    if (editingTransaction) {
      onUpdateTransaction({ ...transactionData, id: editingTransaction.id });
      setEditingTransaction(null);
      setIsModalOpen(false);
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingTransaction(null);
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <PiggyBank className="h-6 w-6 text-blue-600" />
            קופה קטנה
          </h2>
          <p className="text-sm text-gray-600 mt-1">
            יתרה נוכחית: <span className={`font-bold ${balance >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {balance.toLocaleString()}₪
            </span>
          </p>
        </div>
        <button
          onClick={() => setIsModalOpen(true)}
          className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="h-4 w-4" />
          הוסף פעולה
        </button>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-green-100 rounded-full">
              <TrendingUp className="h-6 w-6 text-green-600" />
            </div>
            <div>
              <p className="text-sm text-gray-600">סך הכנסות</p>
              <p className="text-2xl font-bold text-green-600">{totalIncome.toLocaleString()}₪</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-red-100 rounded-full">
              <TrendingDown className="h-6 w-6 text-red-600" />
            </div>
            <div>
              <p className="text-sm text-gray-600">סך הוצאות</p>
              <p className="text-2xl font-bold text-red-600">{totalExpenses.toLocaleString()}₪</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center gap-3">
            <div className={`p-3 rounded-full ${balance >= 0 ? 'bg-blue-100' : 'bg-orange-100'}`}>
              <PiggyBank className={`h-6 w-6 ${balance >= 0 ? 'text-blue-600' : 'text-orange-600'}`} />
            </div>
            <div>
              <p className="text-sm text-gray-600">יתרה</p>
              <p className={`text-2xl font-bold ${balance >= 0 ? 'text-blue-600' : 'text-orange-600'}`}>
                {balance.toLocaleString()}₪
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center gap-4 mb-6 flex-wrap">
          <Filter className="h-5 w-5 text-gray-400" />
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value as 'all' | 'income' | 'expense')}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">כל הפעולות</option>
            <option value="income">הכנסות</option>
            <option value="expense">הוצאות</option>
          </select>
          
          <select
            value={filterEntrance}
            onChange={(e) => setFilterEntrance(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">כל הכניסות</option>
            <option value="building">כל הבניין</option>
            {building.entrances.map(entrance => (
              <option key={entrance} value={entrance}>כניסה {entrance}</option>
            ))}
          </select>
        </div>

        <PettyCashTable
          transactions={filteredTransactions}
          onEditTransaction={handleEditTransaction}
          onDeleteTransaction={onDeleteTransaction}
        />
      </div>

      {isModalOpen && (
        <PettyCashModal
          transaction={editingTransaction}
          building={building}
          onSave={editingTransaction ? handleUpdateTransaction : handleAddTransaction}
          onClose={handleCloseModal}
        />
      )}
    </div>
  );
};
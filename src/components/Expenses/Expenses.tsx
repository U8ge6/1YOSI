import React, { useState } from 'react';
import { Plus, Filter, Receipt, Zap } from 'lucide-react';
import { ExpenseTable } from './ExpenseTable';
import { ExpenseModal } from './ExpenseModal';
import { ElectricityReadings } from './ElectricityReadings';
import { Expense, ElectricityReading, Building } from '../../types';

interface ExpensesProps {
  expenses: Expense[];
  electricityReadings: ElectricityReading[];
  buildings: Building[];
  currentBuildingId: string;
  onAddExpense: (expense: Omit<Expense, 'id'>) => void;
  onUpdateExpense: (expense: Expense) => void;
  onDeleteExpense: (expenseId: string) => void;
  onAddElectricityReading: (reading: Omit<ElectricityReading, 'id'>) => void;
  onUpdateElectricityReading: (reading: ElectricityReading) => void;
  onDeleteElectricityReading: (readingId: string) => void;
}

const SUB_TABS = [
  { id: 'expenses', label: 'הוצאות כלליות', icon: Receipt },
  { id: 'electricity', label: 'קריאות חשמל', icon: Zap }
];

export const Expenses: React.FC<ExpensesProps> = ({
  expenses,
  electricityReadings,
  buildings,
  currentBuildingId,
  onAddExpense,
  onUpdateExpense,
  onDeleteExpense,
  onAddElectricityReading,
  onUpdateElectricityReading,
  onDeleteElectricityReading
}) => {
  const [activeSubTab, setActiveSubTab] = useState('expenses');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  const [filterCategory, setFilterCategory] = useState<string>('all');

  const categories = Array.from(new Set(expenses.map(e => e.category)));
  const filteredExpenses = filterCategory === 'all' 
    ? expenses 
    : expenses.filter(e => e.category === filterCategory);

  const totalExpenses = filteredExpenses.reduce((sum, e) => sum + e.amount, 0);

  const handleAddExpense = (expenseData: Omit<Expense, 'id'>) => {
    onAddExpense(expenseData);
    setIsModalOpen(false);
  };

  const handleEditExpense = (expense: Expense) => {
    if (expense.isAutoGenerated) return; // Cannot edit auto-generated expenses
    setEditingExpense(expense);
    setIsModalOpen(true);
  };

  const handleUpdateExpense = (expenseData: Omit<Expense, 'id'>) => {
    if (editingExpense) {
      onUpdateExpense({ ...expenseData, id: editingExpense.id });
      setEditingExpense(null);
      setIsModalOpen(false);
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingExpense(null);
  };

  const renderContent = () => {
    switch (activeSubTab) {
      case 'expenses':
        return (
          <div>
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">הוצאות כלליות</h3>
                <p className="text-sm text-gray-600 mt-1">
                  סך הוצאות: <span className="font-medium">{totalExpenses.toLocaleString()}₪</span>
                </p>
              </div>
              <button
                onClick={() => setIsModalOpen(true)}
                className="flex items-center gap-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
              >
                <Plus className="h-4 w-4" />
                הוסף הוצאה
              </button>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center gap-4 mb-6">
                <Filter className="h-5 w-5 text-gray-400" />
                <select
                  value={filterCategory}
                  onChange={(e) => setFilterCategory(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                >
                  <option value="all">כל הקטגוריות</option>
                  {categories.map(category => (
                    <option key={category} value={category}>{category}</option>
                  ))}
                </select>
              </div>

              <ExpenseTable
                expenses={filteredExpenses}
                onEditExpense={handleEditExpense}
                onDeleteExpense={onDeleteExpense}
              />
            </div>

            {isModalOpen && (
              <ExpenseModal
                expense={editingExpense}
                onSave={editingExpense ? handleUpdateExpense : handleAddExpense}
                onClose={handleCloseModal}
              />
            )}
          </div>
        );
      case 'electricity':
        return (
          <ElectricityReadings
            readings={electricityReadings}
            buildings={buildings}
            currentBuildingId={currentBuildingId}
            onAddReading={onAddElectricityReading}
            onUpdateReading={onUpdateElectricityReading}
            onDeleteReading={onDeleteElectricityReading}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-2">
        <Receipt className="h-6 w-6 text-orange-600" />
        הוצאות ותחזוקה
      </h2>
      
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="border-b border-gray-200">
          <nav className="flex overflow-x-auto">
            {SUB_TABS.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveSubTab(tab.id)}
                  className={`flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                    activeSubTab === tab.id
                      ? 'border-orange-500 text-orange-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  {tab.label}
                </button>
              );
            })}
          </nav>
        </div>
        
        <div className="p-6">
          {renderContent()}
        </div>
      </div>
    </div>
  );
};